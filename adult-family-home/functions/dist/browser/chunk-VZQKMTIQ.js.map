{
  "version": 3,
  "sources": ["src/app/auth.guard.ts", "src/app/admin/business-list/business-list.component.ts", "src/app/admin/business-list/business-list.component.html", "src/app/admin/admin/admin/admin.component.ts", "src/app/admin/admin/admin/admin.component.html", "src/app/admin/admin-routing.module.ts", "src/app/admin/admin.module.ts"],
  "sourcesContent": ["import { Injectable, Inject, PLATFORM_ID } from '@angular/core';\nimport { CanActivate, Router } from '@angular/router';\nimport { isPlatformBrowser } from '@angular/common';\nimport { Auth, onAuthStateChanged } from '@angular/fire/auth';\n\n@Injectable({ providedIn: 'root' })\nexport class AuthGuard implements CanActivate {\n  constructor(\n    private auth: Auth,\n    private router: Router,\n    @Inject(PLATFORM_ID) private platformId: Object\n  ) {}\n\n  canActivate(): Promise<boolean> {\n    // SSR bypass\n    if (!isPlatformBrowser(this.platformId)) {\n      console.log('â›” SSR: skipping AuthGuard');\n      return Promise.resolve(true);\n    }\n\n    return new Promise((resolve) => {\n      onAuthStateChanged(this.auth, (user) => {\n        if (user) {\n          resolve(true);\n        } else {\n          this.router.navigate(['/login']);\n          resolve(false);\n        }\n      });\n    });\n  }\n}\n", "import { Component, OnInit } from '@angular/core';\nimport { BusinessService } from 'src/app/services/business.service';\nimport { Business } from 'src/app/model/business-questions.model';\nimport { Router } from '@angular/router';\n\n@Component({\n    selector: 'app-business-list',\n    templateUrl: './business-list.component.html',\n    styleUrls: ['./business-list.component.css'],\n    standalone: false\n})\nexport class BusinessListComponent implements OnInit {\n  businesses: Business[] = [];\n  showActiveOnly: boolean = true;\n\n  constructor(private businessService: BusinessService, private router: Router) { }\n\n  ngOnInit(): void {\n    this.loadBusinesses();\n  }\n\n\n\n  loadBusinesses(): void {\n    if (this.showActiveOnly) {\n      this.businessService.getActiveBusinesses().subscribe(businesses => {\n        this.businesses = businesses;\n        //console.log(businesses);\n      });\n    } else {\n      this.businessService.getAllBusinesses().subscribe(businesses => {\n        this.businesses = businesses;\n       // console.log(businesses);\n      });\n    }\n  }\n\n\n  editBusiness(id: string): void {\n    this.router.navigate(['/admin/edit-business', id]);\n  }\n\n  deleteBusiness(id: string): void {\n    if (confirm('Are you sure you want to delete this business?')) {\n      this.businessService.updateBusiness(id, { isActive: false })\n        .then(() => {\n          alert('Business deleted successfully!');\n          this.loadBusinesses();\n        })\n        .catch(err => console.error('Error deleting business', err));\n    }\n  }\n\n  addNewBusiness(): void {\n    this.router.navigate(['/admin/new']);\n  }\n}\n", "<!-- business-list.component.html -->\n<div class=\"business-list-container\">\n  <h2>Business List</h2>\n  <button ttype=\"button\" class=\"afhBtn\"  (click)=\"addNewBusiness()\">Add New Business</button>\n  <label for=\"toggle-active\">Show Active Only</label>\n  <input type=\"checkbox\" id=\"toggle-active\" [(ngModel)]=\"showActiveOnly\" (change)=\"loadBusinesses()\" />\n  <table class=\"business-table\">\n    <thead>\n      <tr>\n        <th>ID</th>\n        <th>Name</th>\n        <th>Provider</th>\n        <th>Active</th>\n        <th>Live</th>\n        <th>Actions</th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr *ngFor=\"let business of businesses\">\n        <td>\n          <a\n            [routerLink]=\"['/home/']\"\n            [queryParams]=\"{ id: business.id }\"\n            class=\"business-id-link\">\n           <strong> {{ business.id }}</strong>\n          </a>\n        </td>\n        <td>{{ business.businessName }}</td>\n        <td><strong>{{ business.providerName}} </strong><br> {{business.phone}}<br>{{business.email}}</td>\n        <td>{{ business.isActive}}</td>\n        <td>{{ business.isLive}}</td>\n        <td>\n          <button type=\"button\" class=\"afhBtn\"  (click)=\"editBusiness(business.id)\">Edit</button>\n          <button type=\"button\" class=\"afhBtn\" *ngIf=\"!business.isActive\"  (click)=\"deleteBusiness(business.id)\">Delete</button>\n        </td>\n      </tr>\n    </tbody>\n  </table>\n</div>\n", "import { Component } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from 'src/app/services/auth.service';\n\n@Component({\n    selector: 'app-admin',\n    templateUrl: './admin.component.html',\n    styleUrls: ['./admin.component.css'],\n    standalone: false\n})\nexport class AdminComponent {\n  constructor(private router: Router, private authService: AuthService) {}\n\n  // Navigate to the business list page\n  loadBusinessList() {\n    this.router.navigate(['/admin/businessList']);\n  }\n\n  // Logout the user and navigate to the login page\n  logout() {\n    this.authService.logout().then(() => {\n      this.router.navigate(['/login']);\n    });\n  }\n}\n", "<div class=\"admin-container\">\n\n  <div class=\"admin-buttons\">\n    <h4>Admin Dashboard</h4>\n    <button type=\"button\" class=\"afhBtn\" (click)=\"loadBusinessList()\">View Business List</button>\n    <button type=\"button\" class=\"afhBtn\" (click)=\"logout()\">Logout</button>\n  </div>\n</div>\n<router-outlet></router-outlet>\n\n", "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { AuthGuard } from '../auth.guard';\nimport { BusinessListComponent } from './business-list/business-list.component';\nimport { AdminComponent } from './admin/admin/admin.component';\nimport { EditBusinessComponent } from './edit-business/edit-business.component';\nimport { PhotoGalleryUploadComponent } from './photo-gallery-upload/photo-gallery-upload.component';\nimport { HomeComponent } from '../component/home/home.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: AdminComponent,\n    canActivate: [AuthGuard],\n    children: [\n      { path: 'businessList', component: BusinessListComponent },\n      { path: 'new', component: EditBusinessComponent },\n      { path: 'edit-business/:id', component: EditBusinessComponent },\n      { path: 'gallery-upload', component: PhotoGalleryUploadComponent },\n      { path: ':id', component: HomeComponent }\n    ]\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class AdminRoutingModule { }\n", "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { AdminRoutingModule } from './admin-routing.module';\n// import { LoginComponent } from './login/login.component';\nimport { AdminComponent } from './admin/admin/admin.component';\nimport { BusinessListComponent } from './business-list/business-list.component';\n// import { BusinessLocationsComponent } from './business-locations/business-locations.component';\n\n\n@NgModule({\n  declarations: [\n    // LoginComponent,\n    AdminComponent,\n    BusinessListComponent,\n    // HeroManagerComponent,\n    // BusinessLocationsComponent,\n  ],\n  imports: [\n    CommonModule,\n    AdminRoutingModule,\n    FormsModule\n  ],\n  exports:[\n    // BusinessLocationsComponent\n  ]\n})\nexport class AdminModule { }\n"],
  "mappings": "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",
  "names": ["AuthGuard", "constructor", "auth", "router", "platformId", "canActivate", "isPlatformBrowser", "Promise", "resolve", "onAuthStateChanged", "user", "navigate", "console", "log", "\u0275\u0275inject", "Auth", "Router", "PLATFORM_ID", "factory", "\u0275fac", "providedIn", "\u0275\u0275elementStart", "\u0275\u0275listener", "\u0275\u0275restoreView", "_r4", "business_r2", "\u0275\u0275nextContext", "$implicit", "ctx_r2", "\u0275\u0275resetView", "deleteBusiness", "id", "\u0275\u0275text", "\u0275\u0275elementEnd", "\u0275\u0275element", "_r1", "editBusiness", "\u0275\u0275template", "BusinessListComponent_tr_24_button_21_Template", "\u0275\u0275advance", "\u0275\u0275property", "\u0275\u0275pureFunction0", "_c0", "\u0275\u0275pureFunction1", "_c1", "\u0275\u0275textInterpolate1", "\u0275\u0275textInterpolate", "businessName", "providerName", "phone", "email", "isActive", "isLive", "BusinessListComponent", "constructor", "businessService", "router", "businesses", "showActiveOnly", "ngOnInit", "loadBusinesses", "getActiveBusinesses", "subscribe", "getAllBusinesses", "navigate", "confirm", "updateBusiness", "then", "alert", "catch", "err", "console", "error", "addNewBusiness", "\u0275\u0275directiveInject", "BusinessService", "Router", "selectors", "standalone", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275twoWayListener", "$event", "i0", "\u0275\u0275twoWayBindingSet", "BusinessListComponent_tr_24_Template", "\u0275\u0275twoWayProperty", "AdminComponent", "constructor", "router", "authService", "loadBusinessList", "navigate", "logout", "then", "\u0275\u0275directiveInject", "Router", "AuthService", "selectors", "standalone", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275elementStart", "\u0275\u0275text", "\u0275\u0275elementEnd", "\u0275\u0275listener", "\u0275\u0275element", "routes", "path", "component", "AdminComponent", "canActivate", "AuthGuard", "children", "BusinessListComponent", "EditBusinessComponent", "PhotoGalleryUploadComponent", "HomeComponent", "AdminRoutingModule", "RouterModule", "forChild", "AdminModule", "CommonModule", "AdminRoutingModule", "FormsModule"]
}
