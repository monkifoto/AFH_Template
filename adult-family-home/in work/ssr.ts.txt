import 'zone.js';
import 'reflect-metadata';
import 'source-map-support/register';
import {join} from 'path';
import {readFileSync, existsSync} from 'fs';
import express from 'express';
import {renderModule} from '@angular/platform-server';
import admin from 'firebase-admin';
// eslint-disable-next-line import/no-unresolved
import {getFirestore} from 'firebase-admin/firestore';
// eslint-disable-next-line import/no-unresolved
// import {AppServerModule} from '../dist/server/main';
import {APP_BASE_HREF} from '@angular/common';
// eslint-disable-next-line import/no-unresolved


// üîê Firebase Admin Init
const serviceAccount = JSON.parse(
    readFileSync(join(process.cwd(),
        'server/firebase/afhdynamicwebsite-firebase-adminsdk-hbemk-514f2fcfe2.json'), 'utf-8')
);

admin.initializeApp({
  credential: admin.credential.cert(serviceAccount),
});

const adminFirestore = getFirestore(admin.app());
const distFolder = join(process.cwd(), 'dist/adult-family-home/browser');
const indexHtml = existsSync(join(distFolder, 'index.original.html')) ?
 'index.original.html' : 'index.html';

// üß† Business ID map by hostname
const businessIdMap: Record<string, string> = {
  'helpinghandafh.com': 'vfCMoPjAu2ROVBbKvk0D',
  'www.helpinghandafh.com': 'vfCMoPjAu2ROVBbKvk0D',
  'aefamilyhome.com': 'UiSDf9elSjwcbQs2HZb1',
  'www.aefamilyhome.com': 'UiSDf9elSjwcbQs2HZb1',
  'elderlyhomecareafh.com': 'SJgFxBYkopnPR4WibCAf',
  'www.elderlyhomecareafh.com': 'SJgFxBYkopnPR4WibCAf',
  'prestigecareafh.com': 'pDJgpl34XUnRblyIlBA7',
  'www.prestigecareafh.com': 'pDJgpl34XUnRblyIlBA7',
  'countrycrestafh.com': 'yrNc50SvfPqwTSkvvygA',
  'www.countrycrestafh.com': 'yrNc50SvfPqwTSkvvygA',
  'sbmediahub.com': 'MGou3rzTVIbP77OLmZa7',
  'sp.sbmediahub.com': 'KyQfU7hjez0uXRfAjqcu',
  'cc.sbmediahub.com': 'yrNc50SvfPqwTSkvvygA',
  'hh.sbmediahub.com': 'vfCMoPjAu2ROVBbKvk0D',
  'ae.sbmediahub.com': 'UiSDf9elSjwcbQs2HZb1',
  'www.sbmediahub.com': 'MGou3rzTVIbP77OLmZa7',
  'elderlyhc.sbmediahub.com': 'SJgFxBYkopnPR4WibCAf',
  'prestige.sbmediahub.com': 'pDJgpl34XUnRblyIlBA7',
};

// üõ†Ô∏è Create Express server
const server = express();

// üñºÔ∏è View engine for Angular Universal
server.engine('html', async (_: any, options: any, callback:
  (arg0: null, arg1: string | undefined) => any) => {
  const req = (options as any).req;

  try {
    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-ignore: Importing compiled Angular server bundle
    const {AppServerModule} =
    await import('../../dist/adult-family-home/server/main.js');


    const html = await renderModule(AppServerModule, {
      document: readFileSync(join(distFolder, indexHtml)).toString(),
      url: req.url,
      extraProviders: [
        {provide: APP_BASE_HREF, useValue: req.baseUrl},
        // {provide: SERVER_REQUEST, useValue: req},
      ],
    });

    callback(null, html);
  } catch (err) {
    callback(null, undefined);
    console.error('‚ùå SSR Render Error:', err);
  }
});

server.set('view engine', 'html');
server.set('views', distFolder);

// üì¶ Serve static files
server.get('*.*', express.static(distFolder, {
  maxAge: '1y',
}));

// üß† SSR handler
server.get('*', async (req: express.Request, res: express.Response) => {
  const start: number = Date.now();
  const hostname: string = req.hostname;
  const businessId: string = businessIdMap[hostname] || 'MGou3rzTVIbP77OLmZa7';

  console.log('\nüü° SSR render started for URL:', req.url);
  console.log('üåê Hostname:', hostname, '| üîë Business ID:', businessId);

  let businessData: Record<string, any> | null = null;

  try {
    const doc: FirebaseFirestore.DocumentSnapshot<FirebaseFirestore.DocumentData> =
    await adminFirestore
        .collection('businesses')
        .doc(businessId)
        .get();
    if (doc.exists) {
      businessData = doc.data() as Record<string, any>;
      console.log('‚úÖ Fetched business data for meta injection');
    }
  } catch (err: unknown) {
    console.error('‚ùå Failed to fetch business meta data:', err);
  }

  res.render(
      indexHtml,
      {req},
      (err: Error | null, html: string | undefined): void => {
        const duration: number = Date.now() - start;

        if (err) {
          console.error('‚ùå SSR Render Error:', err.message || err);
          res.status(500).send(err.message);
          return;
        }

        if (!html) {
          console.error('‚ùå SSR Render Error: No HTML returned');
          res.status(500).send('Server Error: No HTML returned');
        }

        if (businessData) {
          console.log('üü¢ SSR - Injecting meta tags');
          console.log('üü¢ SSR - Business Data:', businessData);

        interface MetaTags {
          metaDescription?: string;
          metaTitle?: string;
          businessName?: string;
          metaImage?: string;
        }

        const metaTags: MetaTags = businessData;

        html = (html ?? '')
            .replace(
                /<title>.*?<\/title>/,
                `<title>${metaTags.metaTitle || metaTags.businessName}</title>`
            )
            .replace(
                /<meta name="description" content=".*?">/,
                `<meta name="description" content="${metaTags.metaDescription ||
                   'Adult Family Home'}">`
            )
            .replace(
                /<meta property="og:title" content=".*?">/,
                `<meta property="og:title" content="${metaTags.metaTitle ||
                   metaTags.businessName}">`
            )
            .replace(
                /<meta property="og:description" content=".*?">/,
                `<meta property="og:description" content="${metaTags.metaDescription || ''}">`
            )
            .replace(
                /<meta property="og:image" content=".*?">/,
                `<meta property="og:image" content="${metaTags.metaImage ||
                   '/assets/default-og.jpg'}">`
            )
            .replace(
                /<meta property="og:url" content=".*?">/,
                `<meta property="og:url" content="https://${hostname}${req.url}">`
            );
        }

        console.log('‚úÖ SSR finished rendering HTML');
        console.log(`‚è±Ô∏è Render duration: ${duration}ms`);

        res.send(html);
        return;
      }
  );
});

// üöÄ Start the server
// eslint-disable-next-line require-jsdoc
function run(): void {
  const port = process.env['PORT'] || 4000;
  server.listen(port, () => {
    console.log(`‚úÖ Node SSR server running on http://localhost:${port}`);
  });
}

run();


export const ssr = server;

try {
  module.exports = require('./src/main.server');
} catch (error) {
  console.error('Module "./src/main.server": not found.' +
    'Please verify the path or file existence.');
}
