import * as functions from 'firebase-functions';
import * as nodemailer from 'nodemailer';
import * as cors from 'cors';
import * as express from 'express';

const app = express();

// ðŸ”¹ Correct CORS setup
const corsHandler = cors({
  origin: ['https://sbmediahub.com', 'https://helpinghandafh.com',
    'https://aefamilyhome.com', 'https://countrycrestafh.com'],
  methods: 'GET,HEAD,PUT,PATCH,POST,DELETE',
  allowedHeaders: ['Content-Type', 'Authorization'],
  credentials: true,
});
app.use(corsHandler);
app.use(express.json());
// Domain-to-credentials mapping
const domainToTransporterConfig: Record<string, {
  user: string; pass: string }> = {
    'helpinghandafh.com': {
      user: 'helpinghand99.afh@gmail.com',
      pass: 'ylcg rmnn aoqk ymow',
    },
    'aefamilyhome.com': {
      user: 'narteae@gmail.com',
      pass: 'fggv tyqw cnkt feex',
    },
    'sbmediahub.com': {
      user: 'sorin.bucse@gmail.com',
      pass: 'ybdv kmuc ciox nifm',
    },
    'countrycrestafh.com': {
      user: 'countrycrestafh@gmail.com',
      pass: 'xemf vinl sfub dbez',
    },
  };

// Default credentials (Fallback)
const defaultTransporterConfig = {
  user: 'sorin.bucse@gmail.com',
  pass: 'biwq ueph cymy evmg',
};

// Function to create a transporter for a domain
const getTransporterForDomain = (domain: string): nodemailer.Transporter => {
  const config = domainToTransporterConfig[domain] || defaultTransporterConfig;
  return nodemailer.createTransport({
    service: 'Gmail',
    auth: {user: config.user, pass: config.pass},
  });
};

// Email sending endpoint
app.post('/send-email', (req, res) => {
  corsHandler(req, res, async () => {
    const {name, email, message, website} = req.body;

    if (!email || !name || !message || !website) {
      return res.status(400).json({success: false, message: 'Missing required fields.'});
    }

    const domain: string = website || '';
    const transporter = getTransporterForDomain(domain);

    const mailOptions = {
      from: domainToTransporterConfig[domain]?.user || defaultTransporterConfig.user,
      to: domainToTransporterConfig[domain]?.user || defaultTransporterConfig.user,
      bcc: 'monkifoto@gmail.com',
      subject: `Contact Email from ${domain}`,
      text: `Name: ${name}\nEmail: ${email}\nMessage: ${message}`,
    };

    try {
      await transporter.sendMail(mailOptions);
      return res.status(200).json({success: true, message: 'Email sent successfully'});
    } catch (error) {
      console.error('Error sending email:', error);
      return res.status(500).json({success: false, message: 'Error sending email', error});
    }
  });
});

// Dynamic Metadata Handling (SEO Meta Tags)
const businessMetadata: Record<string, {title: string; description: string}> = {
  'helpinghandafh.com': {
    title: 'Helping Hand AFH - Quality Care',
    description: 'Providing exceptional adult family home care services.',
  },
  'countrycrestafh.com': {
    title: 'Country Crest AFH - Quality Care',
    description: 'Providing exceptional adult family home care services.',
  },
  'aefamilyhome.com': {
    title: 'AE Family Home - Trusted Care',
    description: 'Caring for your loved ones with dedication.',
  },
  'sbmediahub.com': {
    title: 'SB Media Hub - Digital Solutions',
    description: 'Helping small businesses grow with digital marketing.',
  },
  'default': {
    title: 'Welcome to Our Platform',
    description: 'Find the best services for your needs.',
  },
};

// Handle metadata for SEO
app.get('*', (req, res) => {
  const hostname = req.hostname;
  const metadata = businessMetadata[hostname] || businessMetadata.default;

  const html = `
  <!DOCTYPE html>
  <html lang="en">
  <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>${metadata.title}</title>
      <meta name="description" content="${metadata.description}">
      <meta property="og:title" content="${metadata.title}">
      <meta property="og:description" content="${metadata.description}">
  </head>
  <body>
      <h1>${metadata.title}</h1>
  </body>
  </html>`;

  res.status(200).send(html);
});

// Handle CORS preflight requests
app.options('*', corsHandler, (req, res) => {
  res.status(204).send('');
});


// Deploy to Firebase Functions
exports.app = functions.https.onRequest(app);
